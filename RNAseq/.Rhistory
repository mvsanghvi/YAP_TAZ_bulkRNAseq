library(data.table)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(DOSE)
library(enrichplot)
library(edgeR)
library(limma)
library(data.table)
library(pheatmap)
library(ggplot2)
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
#1. Read FeatureCounts Output
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = TRUE, full.names = TRUE)
# Read all count files into a DGEList
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename sample columns
sample_names <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_names
# Save raw counts (optional)
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
# 2. Clean and Filter Count Table
count_tbl <- fread("counts_raw.tsv", data.table = FALSE)
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
# Filter low-expressed genes (keep if expressed in â‰¥80% of samples)
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_filtered <- count_tbl[gene_keep, ]
# 3, Create Sample Metadata
meta <- data.frame(SampleID = colnames(count_tbl),
CellLine = c("Control", "Y2", "YT"))  # Edit as needed
rownames(meta) <- meta$SampleID
# 4. Create DGEList and Normalize
dge <- DGEList(counts = count_tbl_filtered, samples = meta)
dge <- calcNormFactors(dge)
# 5. Create Design Matrix for voom
design <- model.matrix(~ 0 + dge$samples$CellLine)
colnames(design) <- levels(factor(dge$samples$CellLine))
# 6. voom Transformation (No DE)
v <- voom(dge, design, plot = TRUE)
v$targets <- meta  # Attach metadata for easy access
fwrite(voom_tbl, "Voom_YT.tsv", sep = "\t", row.names = T)
fwrite(v$targets, "Voom_YT.tsv", sep = "\t", row.names = T)
#1. Input Data Format: Import DEG table
deg <- fread("Voom_YT.tsv")
p_threshold <- 0.05
fc_threshold <- 2
