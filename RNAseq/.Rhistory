library(edgeR)
library(limma)
library(data.table)
library(pheatmap)
library(ggplot2)
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
#1. Read FeatureCounts Output
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = TRUE, full.names = TRUE)
# Read all count files into a DGEList
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename sample columns
sample_names <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_names
# Save raw counts (optional)
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
# 2. Clean and Filter Count Table
count_tbl <- fread("counts_raw.tsv", data.table = FALSE)
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
library(data.table)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(DOSE)
library(enrichplot)
#1. Input Data Format: Import DEG table
deg <- fread("Voom_YT.tsv")
p_threshold <- 0.05
fc_threshold <- 2
deg_order_fc <- deg[order(-logFC)] # rank the genes by logFC in descending order
#Setting up environment
install.packages(c("BiocManager"))
BiocManager::install(c("clusterProfiler", "org.Hs.eg.db", "pathview", "enrichplot", "DOSE"))
install.packages(c("data.table", "ggplot2"))
library(data.table)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(DOSE)
library(enrichplot)
deg <- fread("Voom_YT.tsv")
p_threshold <- 0.05
fc_threshold <- 2
deg_order_fc <- deg[order(-logFC)] # rank the genes by logFC in descending order
library(edgeR)
library(limma)
library(data.table)
library(pheatmap)
library(ggplot2)
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
#1. Read FeatureCounts Output
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = TRUE, full.names = TRUE)
# Read all count files into a DGEList
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename sample columns
sample_names <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_names
# Save raw counts (optional)
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
# 2. Clean and Filter Count Table
count_tbl <- fread("counts_raw.tsv", data.table = FALSE)
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
# Filter low-expressed genes (keep if expressed in â‰¥80% of samples)
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_filtered <- count_tbl[gene_keep, ]
# 3, Create Sample Metadata
meta <- data.frame(SampleID = colnames(count_tbl),
CellLine = c("Control", "Y2", "YT"))  # Edit as needed
rownames(meta) <- meta$SampleID
# 4. Create DGEList and Normalize
dge <- DGEList(counts = count_tbl_filtered, samples = meta)
dge <- calcNormFactors(dge)
# 5. Create Design Matrix for voom
design <- model.matrix(~ 0 + dge$samples$CellLine)
colnames(design) <- levels(factor(dge$samples$CellLine))
# 6. voom Transformation (No DEGs)
v <- voom(dge, design, plot = TRUE)
v$targets <- meta  # Attach metadata for easy access
fwrite(v$targets, "Voom_YT.tsv", sep = "\t", row.names = T)
# Export the voom-transformed expression values
voom_expr <- as.data.frame(v$E)
voom_expr$gene_id <- rownames(voom_expr)  # Add gene IDs as a column
fwrite(voom_expr, "voom_expression_data.tsv", sep="\t", row.names=FALSE)
# Load necessary libraries
library(data.table)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(DOSE)
library(enrichplot)
library(limma)
# Option 1a: Use gene variance for GSEA
# Prepare ranked gene list based on variance
gene_list <- gene_var_df$variance
# 7. Heatmap of Top Variable Genes
# Calculate variance of each gene
gene_vars <- apply(v$E, 1, var)
gene_var_df <- data.frame(gene_id = names(gene_vars), variance = gene_vars)
gene_var_df <- gene_var_df[order(-gene_var_df$variance),]  # Sort by variance
fwrite(gene_var_df, "gene_variance.tsv", sep="\t", row.names=FALSE)
# Option 1a: Use gene variance for GSEA
# Prepare ranked gene list based on variance
gene_list <- gene_var_df$variance
names(gene_list) <- gene_var_df$gene_id
gene_list <- sort(gene_list, decreasing = TRUE)
# Convert Ensembl IDs to Entrez IDs for pathway analysis
id_mapping <- bitr(names(gene_list),
fromType = "ENSEMBL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Map the ranked values to Entrez IDs
entrez_list <- gene_list[id_mapping$ENSEMBL]
names(entrez_list) <- id_mapping$ENTREZID
# Run GSEA with GO terms
gsea_result <- gseGO(geneList = entrez_list,
ont = "BP",  # Biological Process
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
pAdjustMethod = "BH")
# For example, comparing Y2 vs Control
Y2_col <- which(colnames(v$E) == "Y2")
Control_col <- which(colnames(v$E) == "Control")
if(length(Y2_col) > 0 && length(Control_col) > 0) {
# Calculate simple log fold change
logFC_Y2_vs_Control <- v$E[, Y2_col] - v$E[, Control_col]
# Create data frame with results
Y2_vs_Control_df <- data.frame(
gene_id = rownames(v$E),
logFC = logFC_Y2_vs_Control
)
# Sort by absolute fold change
Y2_vs_Control_df <- Y2_vs_Control_df[order(-abs(Y2_vs_Control_df$logFC)),]
fwrite(Y2_vs_Control_df, "Y2_vs_Control_logFC.tsv", sep="\t", row.names=FALSE)
# Create ranked list for GSEA
fc_list <- Y2_vs_Control_df$logFC
names(fc_list) <- Y2_vs_Control_df$gene_id
# Convert to Entrez IDs
fc_id_mapping <- bitr(names(fc_list),
fromType = "ENSEMBL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Map the ranked values to Entrez IDs
fc_entrez_list <- fc_list[fc_id_mapping$ENSEMBL]
names(fc_entrez_list) <- fc_id_mapping$ENTREZID
