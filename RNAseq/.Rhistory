# ===== Load Required Libraries =====
library(edgeR)
library(limma)
library(data.table)
library(pheatmap)
# ===== Set Working Directory =====
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
# ===== Step 1: Read FeatureCounts Output =====
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = TRUE, full.names = TRUE)
# Read all count files into a DGEList
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename sample columns
sample_names <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_names
# Save raw counts (optional)
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
# ===== Step 2: Clean and Filter Count Table =====
# Convert first column to rownames
count_tbl <- fread("counts_raw.tsv", data.table = FALSE)
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
# Filter low-expressed genes (keep if expressed in â‰¥80% of samples)
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_filtered <- count_tbl[gene_keep, ]
# ===== Step 3: Create Sample Metadata =====
meta <- data.frame(SampleID = colnames(count_tbl),
CellLine = c("Control", "Y2", "YT"))  # Edit as needed
rownames(meta) <- meta$SampleID
# ===== Step 4: Create DGEList and Normalize =====
dge <- DGEList(counts = count_tbl_filtered, samples = meta)
dge <- calcNormFactors(dge)
# ===== Step 5: Create Design Matrix for voom =====
design <- model.matrix(~ 0 + dge$samples$CellLine)
colnames(design) <- levels(factor(dge$samples$CellLine))
# ===== Step 6: voom Transformation (No DE) =====
v <- voom(dge, design, plot = TRUE)
v$targets <- meta  # Attach metadata for easy access
# ===== Step 7: Heatmap of Top Variable Genes =====
# Calculate variance of each gene
gene_vars <- apply(v$E, 1, var)
# Select top 100 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:100]
log_counts_top <- v$E[top_genes, ]
# Scale for heatmap (row-wise)
log_counts_top_scaled <- t(scale(t(log_counts_top)))
# Sample annotations for columns
annotation_col <- data.frame(CellLine = meta$CellLine)
rownames(annotation_col) <- meta$SampleID
# Plot heatmap
pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = annotation_col,
show_rownames = FALSE,
fontsize_col = 10,
main = "Top 100 Most Variable Genes")
# Plot heatmap
"mymap" <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = annotation_col,
show_rownames = FALSE,
fontsize_col = 10,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
png("mymap")
draw(ht_list, heatmap_legend_side = "right", annotation_legend_side = "bottom")
devoff()
save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
save_pheatmap_pdf("mymap", "test.pdf")
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = annotation_col,
show_rownames = FALSE,
fontsize_col = 10,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.pdf", plot=mymap)
library(ggplot2)
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.pdf", plot=mymap)
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = FALSE,
cluster_cols = FALSE,
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_row = 8
fontsize_col = 10,
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = FALSE,
cluster_cols = FALSE,
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_row = 8,
fontsize_col = 10,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_col = 10,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
treeheight_row = 0,  # Set dendrogram height to 0 (hides it)
treeheight_col = 0,  # Set dendrogram height to 0 (hides it)
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_row = 8,
fontsize_col = 10,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
treeheight_row = 0,  # Set dendrogram height to 0 (hides it)
treeheight_col = 0,  # Set dendrogram height to 0 (hides it)
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_row = 8,
fontsize_col = 5,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
treeheight_row = 0,  # Set dendrogram height to 0 (hides it)
treeheight_col = 0,  # Set dendrogram height to 0 (hides it)
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_row = 5,
fontsize_col = 5,
main = "Top 100 Most Variable Genes")
# Optional: Save to PDF
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
