library(edgeR)
library(limma)
library(data.table)
library(pheatmap)
library(ggplot2)
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
#1. Read FeatureCounts Output
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = TRUE, full.names = TRUE)
# Read all count files into a DGEList
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename sample columns
sample_names <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_names
# Save raw counts (optional)
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
count_tbl <- fread("counts_raw.tsv", data.table = FALSE)
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
# Filter low-expressed genes (keep if expressed in â‰¥80% of samples)
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_filtered <- count_tbl[gene_keep, ]
# 3, Create Sample Metadata
meta <- data.frame(SampleID = colnames(count_tbl),
CellLine = c("Control", "Y2", "YT"))  # Edit as needed
rownames(meta) <- meta$SampleID
# 4. Create DGEList and Normalize
dge <- DGEList(counts = count_tbl_filtered, samples = meta)
dge <- calcNormFactors(dge)
# 5. Create Design Matrix for voom
design <- model.matrix(~ 0 + dge$samples$CellLine)
colnames(design) <- levels(factor(dge$samples$CellLine))
# 6. voom Transformation (No DE)
v <- voom(dge, design, plot = TRUE)
v$targets <- meta  # Attach metadata for easy access
# 7. Heatmap of Top Variable Genes
# Calculate variance of each gene
gene_vars <- apply(v$E, 1, var)
# Select top 100 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:100]
log_counts_top <- v$E[top_genes, ]
# Scale for heatmap (row-wise)
log_counts_top_scaled <- t(scale(t(log_counts_top)))
# Sample annotations for columns
annotation_col <- data.frame(CellLine = meta$CellLine)
rownames(annotation_col) <- meta$SampleID
# Plot heatmap
mymap <- pheatmap(log_counts_top_scaled,
cluster_rows = TRUE,
cluster_cols = TRUE,
treeheight_row = 0,  # Set dendrogram height to 0 (hides it)
treeheight_col = 0,  # Set dendrogram height to 0 (hides it)
annotation_col = annotation_col,
show_rownames = TRUE,
fontsize_row = 5,
fontsize_col = 5,
main = "Top 100 Most Variable Genes")
# Save to image
ggsave("WT_Y2_YT2_rnaseq.png", plot=mymap)
#Export "100 most Variable Genes" Genes to CSV
# After you've identified the top 100 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:100]
# Create a data frame with gene IDs and their variance
top_genes_df <- data.frame(
Gene_ID = top_genes,
Variance = gene_vars[top_genes]
)
# If you've already mapped Ensembl IDs to gene symbols, add those too
if(exists("gene_map")) {
top_genes_df$Gene_Symbol <- sapply(top_genes_df$Gene_ID, function(id) {
if(id %in% names(gene_map) && gene_map[id] != "") {
return(gene_map[id])
} else {
return(id)  # Keep original ID if no symbol available
}
})
}
# Add expression values for each sample
top_genes_df <- cbind(top_genes_df, v$E[top_genes, ])
# Export as CSV
write.csv(top_genes_df, "top_100_variable_genes.csv", row.names = FALSE)
