if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"org.Mm.eg.db", "org.Rn.eg.db"))
install.packages("GenomeInfoDbData")
ninstall.packages(c("data.table", "readxl", "stringr", "ggplot2", "ggrepel",
"ggfortify", "ggprism", "pheatmap", "VennDiagram",
"corrplot", "Hmisc", "stats", "tidyverse"))
install.packages(c("data.table", "readxl", "stringr", "ggplot2", "ggrepel",
"ggfortify", "ggprism", "pheatmap", "VennDiagram",
"corrplot", "Hmisc", "stats", "tidyverse"))
library(data.table)
library(edgeR)
library(limma)
library(ggplot2)
library(limma)
library(ggrepel)
library(ggfortify)
library(stats)
library(sva)
BiocManager::install("GenomeInfoDbData")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"org.Mm.eg.db", "org.Rn.eg.db"))
install.packages(c("data.table", "readxl", "stringr", "ggplot2", "ggrepel",
"ggfortify", "ggprism", "pheatmap", "VennDiagram",
"corrplot", "Hmisc", "stats", "tidyverse"))
library(data.table)
library(edgeR)
library(limma)
library(ggplot2)
library(limma)
library(edgeR)
library(data.table)
library(ggrepel)
library(ggfortify)
library(stats)
library(sva)
setwd("C:\Users\mvsan\code\YAP_TAZ_bulkRNAseq\RNAseq")
setwd("C:\users\mvsan\code\YAP_TAZ_bulkRNAseq\RNAseq")
setwd("C:/users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
getwd()
setwd("C:/users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
setwd(file.path("C:", "Users", "mvsan", "code", "YAP_TAZ_bulkRNAseq", "RNAseq"))
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq")
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
# Retrieve count file paths
file_names <- list.files(count_file_path, pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Retrieve count file paths
file_names <- list.files(pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1,2)
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq")
# Retrieve count file paths
file_names <- list.files(pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1,2)
getwd()
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq")
getwd()
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq")
# Retrieve count file paths
file_names <- list.files(pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1,2)
# Retrieve count file paths
file_names <- list.files(pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1,2)
# Retrieve count file paths
file_names <- list.files("WT_P62_featureCounts_gene", "Y2_P37_28_featureCounts_gene", "YT2_P37_7_17_featureCounts_gene")
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
View(counts_raw)
counts_raw <- as.data.frame(dgls$counts)
View(counts_raw)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
View(counts_raw)
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
View(counts_raw)
View(counts_raw)
View(count_tbl)
View(count_tbl)
View(counts_raw)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
View(counts_raw)
View(counts_raw)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
View(counts_raw)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7))
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7))
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
View(counts_raw)
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
View(counts_raw)
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
getwd()
setwd("C:/Users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq")
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7))
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
View(counts_raw)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
View(counts_raw)
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
getwd()
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
View(counts_raw)
# Rename samples
colnames(counts_raw)[colnames(counts_raw) == ""] <- "Gene Name"
View(counts_raw)
# Rename samples
colnames(counts_raw)<- c("Gene Name")
View(counts_raw)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
View(counts_raw)
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
getwd()
# Retrieve count file paths
file_names <- list.files(count_file_path, pattern = "featureCounts_exon\\.txt$", recursive = T, full.names = T)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_exon\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_exon\\.txt$", recursive = T, full.names = T)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
View(counts_raw)
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
View(counts_raw)
View(count_tbl)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
View(counts_raw)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
View(counts_raw)
View(dgls)
View(counts_raw)
View(counts_raw)
View(counts_raw)
counts_raw <- cbind(gene_name = rownames(counts_raw), counts_raw)
rownames(counts_raw) <- NULL
View(counts_raw)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t")
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
#Transform the first column into row names and remove it from the table:
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
View(count_tbl)
View(count_tbl)
# Retrieve count file paths
file_names <- list.files(path = ".", pattern = "featureCounts_gene\\.txt$", recursive = T, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
View(counts_raw)
# Rename samples
sample_name <- gsub("_featureCounts_gene", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
View(counts_raw)
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
#Read raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
View(count_tbl)
#Transform the first column into row names and remove it from the table:
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
View(count_tbl)
#Remove genes with low or no expression (keeps genes that are expressed in at least 80% of the samples):
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_low_rm <- count_tbl[gene_keep, ]
View(count_tbl_low_rm)
#Create a metadata table with information about each sample:
meta <- data.frame(SampleID = colnames(count_tbl),
Treatment = c("KRAS_SPIB", "KRAS_SPIB", "KRAS", "KRAS"))
#Create a metadata table with information about each sample:
meta <- data.frame(SampleID = colnames(count_tbl),
rownames(meta) <- meta$SampleID
#Create a metadata table with information about each sample:
meta <- data.frame(SampleID = colnames(count_tbl),
Treatment = c("Control", "YAP KO", "YAP+TAZ KO"))
rownames(meta) <- meta$SampleID
View(meta)
dge <- DGEList(counts=count_tbl_low_rm, samples = meta)
dge <- calcNormFactors(dge, method = "TMM")
dge_v <- voom(dge, plot=TRUE)
# save the dge_v object for later use
saveRDS(dge_v, "dge_v.rds")
#Create PCA plot
shape_column <- "Cell Line"
color_column <- "Cell Line"
label <- TRUE
label_size <- 4
plot_save_name <- "PCA_Plot.pdf"
meta_table <- dge_v$targets
count_table_t <- as.data.frame(t(dge_v$E))
pca_prep <- prcomp(count_table_t, scale. = TRUE)
pca_plot <- autoplot(pca_prep, label, shape = shape_column, data = meta_table, colour = color_column) +
geom_text_repel(aes(label = rownames(meta_table)), size = label_size) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank())
ggsave(plot_save_name, device = "pdf", units = "cm", width = 16, height = 14)
#Create a metadata table with information about each sample:
meta <- data.frame(SampleID = colnames(count_tbl),
Cell Line = c("Control", "YAP KO", "YAP+TAZ KO"))
#Create a metadata table with information about each sample:
meta <- data.frame(SampleID = colnames(count_tbl),
Cell_Line = c("Control", "YAP KO", "YAP+TAZ KO"))
color_column <- "Cell_Line"
rownames(meta) <- meta$SampleID
dge <- DGEList(counts=count_tbl_low_rm, samples = meta)
dge <- calcNormFactors(dge, method = "TMM")
dge_v <- voom(dge, plot=TRUE)
# save the dge_v object for later use
saveRDS(dge_v, "dge_v.rds")
#Create PCA plot
shape_column <- "Cell_Line"
color_column <- "Cell_Line"
label <- TRUE
label_size <- 4
plot_save_name <- "PCA_Plot.pdf"
meta_table <- dge_v$targets
count_table_t <- as.data.frame(t(dge_v$E))
pca_prep <- prcomp(count_table_t, scale. = TRUE)
pca_plot <- autoplot(pca_prep, label, shape = shape_column, data = meta_table, colour = color_column) +
geom_text_repel(aes(label = rownames(meta_table)), size = label_size) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank())
ggsave(plot_save_name, device = "pdf", units = "cm", width = 16, height = 14)
View(pca_plot)
ggsave(WT_Y2_YT2, device = "pdf", units = "cm", width = 16, height = 14)
WT_Y2_YT2 <- "PCA_Plot.pdf"
meta_table <- dge_v$targets
count_table_t <- as.data.frame(t(dge_v$E))
pca_prep <- prcomp(count_table_t, scale. = TRUE)
pca_plot <- autoplot(pca_prep, label, shape = shape_column, data = meta_table, colour = color_column) +
geom_text_repel(aes(label = rownames(meta_table)), size = label_size) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank())
ggsave(WT_Y2_YT2, device = "pdf", units = "cm", width = 16, height = 14)
plot(WT_Y2_YT2)
plot(pca_plot)
