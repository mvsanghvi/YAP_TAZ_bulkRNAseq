if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"org.Mm.eg.db", "org.Rn.eg.db"))
library(data.table)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
library(data.table)
library(limma)
library(edgeR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"pathview", "enrichplot", "DOSE", "msigdbr"))
remotes::install_github("YuLab-SMU/clusterProfiler")
install.packages("remotes")
library(remotes)
remotes::install_github("YuLab-SMU/clusterProfiler")
install.packages("remotes")
library(remotes)
remotes::install_github("YuLab-SMU/clusterProfiler")
force = TRUE
install.packages("remotes")
library(remotes)
remotes::install_github("YuLab-SMU/clusterProfiler")
if (!requireNamespace("remotes", quietly = TRUE))
install.packages("remotes")
remotes::install_github("YuLab-SMU/clusterProfiler", force = TRUE)
install.packages(c("boot", "Matrix"))
install.packages(c("broom", "checkmate", "colorspace", "curl", "dbplyr", "dtplyr", "evaluate", "forcats", "gargle", "googledrive", "googlesheets4", "Hmisc", "hms", "ragg", "RcppArmadillo", "rmarkdown", "rvest", "statmod", "textshaping", "vroom", "xfun", "XML", "xml2"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
install.packages("remotes")
library(remotes)
remotes::install_github("YuLab-SMU/clusterProfiler")
remotes::install_github("YuLab-SMU/clusterProfiler", force = TRUE)
library(data.table)
library(limma)
library(edgeR)
library(ggplot2)
library(ggrepel)
library(ggfortify)
library(stats)
library(sva)
setwd("C:/users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq/Rep analysis/Pairwise/Pair_3reps")
#Combine count files into single expression matrix
# Retrieve count file paths
file_names <- list.files(path= ".", pattern = "featureCounts_exon\\.txt$", recursive = F, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_exon", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = T)
#Reading raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
#Adding Row Names to the Count Table
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
##FILTERING
#Remove genes with little to no expression
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_low_rm <- count_tbl[gene_keep, ]
#Creating Meta Data table with info about each sample
meta <- data.frame(SampleID = colnames(count_tbl),
CellType = c("WT", "WT", "WT", "YAPKO", "YAPKO", "YAPKO", "YAP_TAZKO", "YAP_TAZKO", "YAP_TAZKO"))
rownames(meta) <- meta$SampleID
#Combine count data and sample info into object
dge <- DGEList(counts=count_tbl_low_rm, samples = meta)
#Normalize for difficulties between samples
dge <- calcNormFactors(dge, method = "TMM")
dge_v <- voom(dge, plot=TRUE)
# Use your existing CellType group variable from meta
group <- factor(meta$CellType)
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Fit the linear model to normalized counts (voom object)
fit <- lmFit(dge_v, design)
# Set up contrasts for pairwise comparisons
contrast.matrix <- makeContrasts(
YAPKOvsWT = YAPKO - WT,
YAP_TAZKOvsWT = YAP_TAZKO - WT,
YAP_TAZKOvsYAPKO = YAP_TAZKO - YAPKO,
levels = design
)
# Differential Expression Analysis: Compute DE
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
# Extract DE results for each comparison
tT_YAPKOvsWT <- topTable(fit2, coef="YAPKOvsWT", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
tT_YAP_TAZKOvsWT <- topTable(fit2, coef="YAP_TAZKOvsWT", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
tT_YAP_TAZKOvsYAPKO <- topTable(fit2, coef="YAP_TAZKOvsYAPKO", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
# Save results
fwrite(tT_YAPKOvsWT, "DE_YAPKO_vs_WT.tsv", sep="\t", row.names=T)
fwrite(tT_YAP_TAZKOvsWT, "DE_YAP_TAZKO_vs_WT.tsv", sep="\t", row.names=T)
fwrite(tT_YAP_TAZKOvsYAPKO, "DE_YAP_TAZKO_vs_YAPKO.tsv", sep="\t", row.names=T)
#Visualizing and GSEA
BiocManager::install(c("pathview", "enrichplot", "DOSE"))
library(clusterProfiler)
library(org.Hs.eg.db)
library(DOSE)
library(enrichplot)
deg1 <- fread("DE_YAPKO_vs_WT.tsv")
deg2 <- fread("DE_YAP_TAZKO_vs_WT.tsv")
deg3 <- fread("DE_YAP_TAZKO_vs_YAPKO.tsv")
p_threshold <- 0.05
fc_threshold <- 2
# Simplified Pairwise GSEA GO Analyses
# 1. Prepare ranked gene lists based on logFC and p-value
rank_genes <- function(df){
df <- df[!is.na(df$logFC) & !is.na(df$P.Value), ]
ranks <- df$logFC
names(ranks) <- rownames(df)
ranks <- sort(ranks, decreasing = TRUE)
return(ranks)
}
rank_YAPKOvsWT <- rank_genes(tT_YAPKOvsWT)
rank_YAP_TAZKOvsWT <- rank_genes(tT_YAP_TAZKOvsWT)
rank_YAP_TAZKOvsYAPKO <- rank_genes(tT_YAP_TAZKOvsYAPKO)
# 2. Run GSEA GO for BP, MF, and CC combined
gsea_go <- function(ranks, OrgDb, ont = "ALL"){
gseGO(geneList = ranks,
OrgDb = OrgDb,
keyType = "SYMBOL",
ont = ont,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE)
}
# Run combined ontology GSEA for each comparison (no separate MF or CC calls needed)
gsea_YAPKOvsWT <- gsea_go(rank_YAPKOvsWT, org.Hs.eg.db)
gsea_YAP_TAZKOvsWT <- gsea_go(rank_YAP_TAZKOvsWT, org.Hs.eg.db)
gsea_YAP_TAZKOvsYAPKO <- gsea_go(rank_YAP_TAZKOvsYAPKO, org.Hs.eg.db)
# Save combined results
save(gsea_YAPKOvsWT, gsea_YAP_TAZKOvsWT, gsea_YAP_TAZKOvsYAPKO,
file = "GSEA_GO_ALL_ontologies_results.RData")
# Visualize: You can still use dotplot and gseaplot2 on these combined objects
png("GSEA_YAPKOvsWT_GO_ALL.png", width=10, height=8, units="in", res=300)
gseaplot2(gsea_YAPKOvsWT, geneSetID=1, title="YAPKO vs WT - GO ALL")
dev.off()
# Visualize: You can still use dotplot and gseaplot2 on these combined objects
png("GSEA_YAPKOvsWT_GO_ALL.png", width=10, height=8, units="in", res=300)
gseaplot2(gsea_YAPKOvsWT, geneSetID=1, title="YAPKO vs WT - GO ALL")
dev.off()
png("Dotplot_YAPKOvsWT_GO_ALL.png", width=10, height=8, units="in", res=300)
dotplot(gsea_YAPKOvsWT, showCategory=15, title="YAPKO vs WT - GO ALL")
dev.off()
png("Dotplot_YAP_TAZKOvsWT_GO_ALL.png", width=10, height=8, units="in", res=300)
dotplot(gsea_YAP_TAZKOvsWT, showCategory=15, title="YAP_TAZKO vs WT - GO ALL")
dev.off()
png("Dotplot_YAP_TAZKOvsYAPKO_GO_ALL.png", width=10, height=8, units="in", res=300)
dotplot(gsea_YAP_TAZKOvsYAPKO, showCategory=15, title="YAP_TAZKO vs YAPKO - GO ALL")
dev.off()
# Helper function to prepare ranked gene lists (Entrez IDs required)
rank_genes_entrez <- function(df){
df <- df[!is.na(df$logFC) & !is.na(df$P.Value), ]
# Assuming you have a mapping from gene symbols to Entrez already done (here `entrez_ids`)
# For demonstration, assume rownames(df) are Entrez IDs or have been converted
ranks <- df$logFC
names(ranks) <- rownames(df)   # Make sure these are Entrez IDs for KEGG
ranks <- sort(ranks, decreasing = TRUE)
return(ranks)
}
# Prepare ranked gene lists for each contrast (replace with your Entrez-mapped data frames)
rank_keggYAPKOvsWT <- rank_genes_entrez(tT_YAPKOvsWT)
rank_keggYAP_TAZKOvsWT <- rank_genes_entrez(tT_YAP_TAZKOvsWT)
rank_keggYAP_TAZKOvsYAPKO <- rank_genes_entrez(tT_YAP_TAZKOvsYAPKO)
# Run pairwise GSEA KEGG analysis for each contrast
gsea_kegg_go <- function(ranks, organism = "hsa"){
gseKEGG(geneList = ranks,
organism = organism,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE)
}
ranks <- tT_YAPKOvsWT$logFC
names(ranks) <- tT_YAPKOvsWT$EntrezID  # NOT SYMBOLS
ranks <- sort(ranks, decreasing = TRUE)
names(ranks) <- as.character(tT_YAPKOvsWT$EntrezID)
valid <- !is.na(tT_YAPKOvsWT$EntrezID)
ranks <- tT_YAPKOvsWT$logFC[valid]
names(ranks) <- as.character(tT_YAPKOvsWT$EntrezID[valid])
ranks <- sort(ranks, decreasing = TRUE)
kk <- enrichKEGG(gene = names(ranks), organism = "hsa")
search_kegg_organism('Homo sapiens', by='scientific_name')
bitr_kegg(genes, fromType = "kegg", toType = "ncbi-geneid", organism = "hsa")
# Optional: convert gene symbols to Entrez IDs
gene <- bitr(gene_symbols, fromType = "SYMBOL",
toType = "ENTREZID", OrgDb = org.Hs.eg.db)
