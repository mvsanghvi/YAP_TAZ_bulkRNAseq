if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"org.Mm.eg.db", "org.Rn.eg.db"))
library(data.table)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
library(data.table)
library(limma)
library(edgeR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"pathview", "enrichplot", "DOSE", "msigdbr"))
library(data.table)
library(limma)
library(edgeR)
library(clusterProfiler)
library(org.Hs.eg.db)
library(msigdbr)
library(pheatmap)
library(stringr)
library(dplyr)
setwd("C:/users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq/Rep analysis/Pairwise/Pair_3reps/3rep_avg")
# 1. Read count files and combine into matrix
file_names <- list.files(path= ".", pattern = "featureCounts_exon\\.txt$", full.names = TRUE)
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# 2. Rename sample columns
sample_names <- gsub("_featureCounts_exon", "", colnames(counts_raw))
colnames(counts_raw) <- sample_names
# 3. Save combined counts (optional)
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = TRUE)
# 4. Read raw counts and set rownames
count_tbl <- fread("counts_raw.tsv", data.table = FALSE)
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
# 5. Filter low-expression genes
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_filtered <- count_tbl[gene_keep, ]
# 6. Prepare metadata
meta <- data.frame(SampleID = colnames(count_filtered),
CellType = c("WT", "WT", "WT", "YAPKO", "YAPKO", "YAPKO",
"YAP_TAZKO", "YAP_TAZKO", "YAP_TAZKO"))
rownames(meta) <- meta$SampleID
# 7. Create DGEList and normalize
dge <- DGEList(counts = count_filtered, samples = meta)
dge <- calcNormFactors(dge, method = "TMM")
dge_v <- voom(dge, plot = TRUE)
#Differential Expression Analysis
group <- factor(meta$CellType)
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
fit <- lmFit(dge_v, design)
contrast.matrix <- makeContrasts(
YAPKOvsWT = YAPKO - WT,
YAP_TAZKOvsWT = YAP_TAZKO - WT,
YAP_TAZKOvsYAPKO = YAP_TAZKO - YAPKO,
levels = design
)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
tT_YAPKOvsWT <- topTable(fit2, coef="YAPKOvsWT", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
tT_YAP_TAZKOvsWT <- topTable(fit2, coef="YAP_TAZKOvsWT", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
tT_YAP_TAZKOvsYAPKO <- topTable(fit2, coef="YAP_TAZKOvsYAPKO", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
# Averaging Replicates
expr_matrix <- dge_v$E   # Normalized expression matrix (log2 CPM)
meta <- meta[colnames(expr_matrix), ]  # Ensure matching order
group_factor <- factor(meta$CellType)
expr_avg <- sapply(levels(group_factor), function(g) {
rowMeans(expr_matrix[, group_factor == g, drop = FALSE])
})
expr_avg <- as.data.frame(expr_avg)
rownames(expr_avg) <- rownames(expr_matrix)
annotation_col_avg <- data.frame(CellType = colnames(expr_avg))
rownames(annotation_col_avg) <- colnames(expr_avg)
# Desired order of groups
desired_order <- c("WT", "YAPKO", "YAP_TAZKO")
# Reorder columns of averaged expression matrix
expr_avg <- expr_avg[, desired_order]
# Reorder annotation to match
annotation_col_avg <- annotation_col_avg[desired_order,, drop=FALSE]
# Get Reactome pathways from msigdbr (subcategory: CP:REACTOME)
reactome_pathways <- msigdbr(species = "Homo sapiens",
category = "C2",
subcategory = "CP:REACTOME") %>%
dplyr::select(gs_name, gene_symbol) %>%
dplyr::distinct()
fgf_pathways <- reactome_pathways %>%
filter(stringr::str_detect(gs_name, regex("FGF", ignore_case = TRUE)))
gsea_reactome <- GSEA(geneList = gene_list,
TERM2GENE = reactome_pathways,
pvalueCutoff = 0.25,
minGSSize = 15,
maxGSSize = 500,
pAdjustMethod = "BH",
verbose = TRUE)
# Create ranking metric (e.g., variance across groups) and gene_list
gene_list <- apply(expr_avg, 1, var)
names(gene_list) <- rownames(expr_avg)
gene_list <- gene_list[!is.na(gene_list) & !duplicated(names(gene_list))]
# Get Reactome pathways from msigdbr (subcategory: CP:REACTOME)
reactome_pathways <- msigdbr(species = "Homo sapiens",
category = "C2",
subcategory = "CP:REACTOME") %>%
dplyr::select(gs_name, gene_symbol) %>%
dplyr::distinct()
fgf_pathways <- reactome_pathways %>%
filter(stringr::str_detect(gs_name, regex("FGF", ignore_case = TRUE)))
gsea_reactome <- GSEA(geneList = gene_list,
TERM2GENE = reactome_pathways,
pvalueCutoff = 0.25,
minGSSize = 15,
maxGSSize = 500,
pAdjustMethod = "BH",
verbose = TRUE)
gene_list <- sort(gene_list, decreasing = TRUE)
gsea_reactome <- GSEA(geneList = gene_list,
TERM2GENE = reactome_pathways,
pvalueCutoff = 0.25,
minGSSize = 15,
maxGSSize = 500,
pAdjustMethod = "BH",
verbose = TRUE)
gsea_reactome_df <- as.data.frame(gsea_reactome)
fgf_gsea <- gsea_reactome_df[stringr::str_detect(gsea_reactome_df$Description, regex("FGF", ignore_case = TRUE)), ]
# Create heatmaps for FGF pathways
for(i in seq_len(nrow(fgf_gsea))) {
create_pathway_heatmap(fgf_gsea[i, ], expr_avg, annotation_col_avg, output_prefix = "heatmap_Reactome_FGF")
}
View(gsea_reactome_df)
gsea_reactome <- GSEA(geneList = gene_list,
TERM2GENE = reactome_pathways,
pvalueCutoff = 0.5,
minGSSize = 15,
maxGSSize = 500,
pAdjustMethod = "BH",
verbose = TRUE)
gsea_reactome_df <- as.data.frame(gsea_reactome)
fgf_gsea <- gsea_reactome_df[stringr::str_detect(gsea_reactome_df$Description, regex("FGF", ignore_case = TRUE)), ]
