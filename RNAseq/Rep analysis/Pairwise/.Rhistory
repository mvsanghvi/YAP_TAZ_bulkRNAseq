if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"org.Mm.eg.db", "org.Rn.eg.db"))
library(data.table)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
library(data.table)
library(limma)
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
library(data.table)
library(limma)
library(edgeR)
library(ggplot2)
library(ggrepel)
library(ggfortify)
library(stats)
library(sva)
setwd("C:/users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq/Rep analysis/Pairwise")
#Combine count files into single expression matrix
# Retrieve count file paths
file_names <- list.files(path= ".", pattern = "featureCounts_exon\\.txt$", recursive = F, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_exon", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = T)
#Reading raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
#Adding Row Names to the Count Table
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
##FILTERING
#Remove genes with little to no expression
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_low_rm <- count_tbl[gene_keep, ]
#Creating Meta Data table with info about each sample
meta <- data.frame(SampleID = colnames(count_tbl),
CellType = c("WT", "WT", "YAPKO", "YAPKO", "YAP_TAZKO", "YAP_TAZKO"))
rownames(meta) <- meta$SampleID
#Combine count data and sample info into object
dge <- DGEList(counts=count_tbl_low_rm, samples = meta)
#Normalize for difficulties between samples
dge <- calcNormFactors(dge, method = "TMM")
dge_v <- voom(dge, plot=TRUE)
# Use your existing CellType group variable from meta
group <- factor(meta$CellType)
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Fit the linear model to normalized counts (voom object)
fit <- lmFit(dge_v, design)
# Set up contrasts for pairwise comparisons
contrast.matrix <- makeContrasts(
YAPKOvsWT = YAPKO - WT,
YAP_TAZKOvsWT = YAP_TAZKO - WT,
YAP_TAZKOvsYAPKO = YAP_TAZKO - YAPKO,
levels = design
)
# Differential Expression Analysis: Compute DE
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
# Extract DE results for each comparison
tT_YAPKOvsWT <- topTable(fit2, coef="YAPKOvsWT", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
tT_YAP_TAZKOvsWT <- topTable(fit2, coef="YAP_TAZKOvsWT", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
tT_YAP_TAZKOvsYAPKO <- topTable(fit2, coef="YAP_TAZKOvsYAPKO", adjust.method="BH", number=Inf, p.value=1, lfc=0, sort.by = "p")
# Save results
fwrite(tT_YAPKOvsWT, "DE_YAPKO_vs_WT.tsv", sep="\t", row.names=T)
fwrite(tT_YAP_TAZKOvsWT, "DE_YAP_TAZKO_vs_WT.tsv", sep="\t", row.names=T)
fwrite(tT_YAP_TAZKOvsYAPKO, "DE_YAP_TAZKO_vs_YAPKO.tsv", sep="\t", row.names=T)
#Visualizing and GSEA
BiocManager::install(c("pathview", "enrichplot", "DOSE"))
library(clusterProfiler)
library(org.Hs.eg.db)
library(DOSE)
library(enrichplot)
deg1 <- fread("DE_YAPKO_vs_WT.tsv")
deg2 <- fread("DE_YAP_TAZKO_vs_WT.tsv")
deg3 <- fread("DE_YAP_TAZKO_vs_YAPKO.tsv")
p_threshold <- 0.05
fc_threshold <- 2
#### Gene Set Enrichment Analysis (GSEA)
### rank the DEGs by the fold change
##WT vs YAPKO
deg1_order_fc <- deg1[order(-logFC)] # rank the genes by logFC in descending order
logfc1 <- deg1_order_fc$logFC # get logFC
##Over-representation Analysis
# make a gene list
deg_up1 <- deg1[logFC > log2(fc_threshold) & adj.P.Val < p_threshold]$V1
# deg_dn <- deg[logFC < -log2(fc_threshold) & adj.P.Val < p_threshold]$V1
enrich_go_fet_up1 <- enrichGO(gene = deg_up1, OrgDb=org.Hs.eg.db, keyType="SYMBOL", ont="ALL", pvalueCutoff=0.05, pAdjustMethod="BH", qvalueCutoff=0.05)
enrich_go_fet_up_df1 <- enrich_go_fet_up1@result
##Over-representation Analysis
# make a gene list
deg_up1 <- deg1[logFC > log2(fc_threshold) & adj.P.Val < p_threshold]$V1
#### Gene Set Enrichment Analysis (GSEA)
### rank the DEGs by the fold change
##WT vs YAPKO
deg1_order_fc <- deg1[order(-logFC)] # rank the genes by logFC in descending order
logfc1 <- deg1_order_fc$logFC # get logFC
names(logfc1) <- deg1_order_fc$V1 # make a named vector of logFC
##Over-representation Analysis
# make a gene list
deg_up1 <- deg1[logFC > log2(fc_threshold) & adj.P.Val < p_threshold]$V1
#KEGG Analysis
#enrich_kegg_gsea <- gseKEGG(geneList = logfc, organism = "hsa")
# 7. Heatmap of Top Variable Genes
# Calculate variance of each gene
gene_vars1 <- apply(deg1$E, 1, var)
#KEGG Analysis
#enrich_kegg_gsea <- gseKEGG(geneList = logfc, organism = "hsa")
library(clusterProfiler)
library(org.Hs.eg.db)
#Visualizing and GSEA
BiocManager::install(c("pathview", "enrichplot", "DOSE"))
library(clusterProfiler)
library(org.Hs.eg.db)
library(DOSE)
library(enrichplot)
deg1 <- fread("DE_YAPKO_vs_WT.tsv")
deg2 <- fread("DE_YAP_TAZKO_vs_WT.tsv")
deg3 <- fread("DE_YAP_TAZKO_vs_YAPKO.tsv")
p_threshold <- 0.05
fc_threshold <- 2
#KEGG Analysis
#enrich_kegg_gsea <- gseKEGG(geneList = logfc, organism = "hsa")
# Prepare ranked gene list
deg_list <- deg1
gene_list <- deg_list$logFC
names(gene_list) <- deg_list$ENTREZID
gene_list <- sort(gene_list, decreasing = TRUE)
# GSEA or over-representation analysis for GO Biological Process
gsea_res <- gseGO(geneList = gene_list,
OrgDb = org.Hs.eg.db,
ont = "BP",
keyType = "ENTREZID",
pvalueCutoff = 0.05,
verbose = FALSE)
# Suppose deg1 contains columns 'ENTREZID' and 'logFC'
gene_list <- deg1$logFC
names(gene_list) <- deg1$ENTREZID
gene_list <- sort(gene_list, decreasing=TRUE)
gene_list
gene_df <- bitr(deg1$gene_symbol, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
deg1 <- merge(deg1, gene_df, by.x = "gene_symbol", by.y = "SYMBOL")
deg1$gene_symbol <- rownames(deg1)
deg1 <- merge(deg1, gene_df, by.x = "gene_symbol", by.y = "SYMBOL")
gene_list <- deg1$logFC
names(gene_list) <- deg1$ENTREZID
gene_list <- gene_list[!is.na(names(gene_list))]
# GSEA or over-representation analysis for GO Biological Process
gsea_res <- gseGO(geneList = gene_list,
OrgDb = org.Hs.eg.db,
ont = "BP",
keyType = "ENTREZID",
pvalueCutoff = 0.05,
verbose = FALSE)
orgdb <- org.Hs.eg.db
# GSEA or over-representation analysis for GO Biological Process
gsea_res <- gseGO(geneList = gene_list,
OrgDb = orgdb,
ont = "BP",
keyType = "ENTREZID",
pvalueCutoff = 0.05,
verbose = FALSE)
orgdb <- get("org.Hs.eg.db")
# GSEA or over-representation analysis for GO Biological Process
gsea_res <- gseGO(geneList = gene_list,
OrgDb = orgdb,
ont = "BP",
keyType = "ENTREZID",
pvalueCutoff = 0.05,
verbose = FALSE)
