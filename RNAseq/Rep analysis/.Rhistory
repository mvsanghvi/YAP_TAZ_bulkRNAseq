if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db",
"org.Mm.eg.db", "org.Rn.eg.db"))
library(data.table)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
library(data.table)
library(limma)
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("sva", "edgeR", "limma", "Biobase", "biomaRt",
"clusterProfiler", "EnhancedVolcano", "org.Hs.eg.db"))
library(data.table)
library(limma)
library(edgeR)
library(ggplot2)
library(ggrepel)
library(ggfortify)
library(stats)
library(sva)
setwd("C:/users/mvsan/code/YAP_TAZ_bulkRNAseq/RNAseq/Rep analysis")
#Combine count files into single expression matrix
# Retrieve count file paths
file_names <- list.files(path= ".", pattern = "featureCounts_exon\\.txt$", recursive = F, full.names = T)
# Read all count files into a DGElist
dgls <- readDGE(file_names, columns = c(1, 7), skip = 1)
counts_raw <- as.data.frame(dgls$counts)
# Rename samples
sample_name <- gsub("_featureCounts_exon", "", basename(colnames(counts_raw)))
colnames(counts_raw) <- sample_name
# Save the combined count table
fwrite(counts_raw, "counts_raw.tsv", sep = "\t", row.names = T)
#Reading raw count data
count_tbl <- fread("counts_raw.tsv", data.table = F)
#Adding Row Names to the Count Table
rownames(count_tbl) <- count_tbl[[1]]
count_tbl <- count_tbl[, -1]
##FILTERING
#Remove genes with little to no expression
perc_keep <- 0.8
gene_keep <- rowSums(count_tbl > 0) >= ceiling(perc_keep * ncol(count_tbl))
count_tbl_low_rm <- count_tbl[gene_keep, ]
#Creating Meta Data table with info about each sample
meta <- data.frame(SampleID = colnames(count_tbl),
CellType = c("WT", "WT", "YAPKO", "YAPKO", "YAP_TAZKO", "YAP_TAZKO"))
rownames(meta) <- meta$SampleID
#Combine count data and sample info into object
dge <- DGEList(counts=count_tbl_low_rm, samples = meta)
#Normalize for difficulties between samples
dge <- calcNormFactors(dge, method = "TMM")
dge_v <- voom(dge, plot=TRUE)
# Calculate variance of each gene
gene_vars <- apply(dge_v$E, 1, var)
gene_var_df <- data.frame(gene_id = names(gene_vars), variance = gene_vars)
gene_var_df <- gene_var_df[order(-gene_var_df$variance),]  # Sort by variance
fwrite(gene_var_df, "gene_variance.tsv", sep="\t", row.names=FALSE)
# Select top 100 most variable genes
top_genes <- names(sort(gene_vars, decreasing = TRUE))[1:100]
log_counts_top <- dge_v$E[top_genes, ]
# Scale for heatmap (row-wise)
log_counts_top_scaled <- t(scale(t(log_counts_top)))
# Prepare sample annotations
col_annot_df <- data.frame(
Treatment = dge_v$targets$Treatment,
row.names = rownames(dge_v$targets)
)
View(dge_v)
col_annot_df <- data.frame(
CellType = dge_v$targets$CellType,
row.names = rownames(dge_v$targets)
)
col_annot_df <- col_annot_df[order(col_annot_df$Treatment), , drop = FALSE]
col_annot_df <- col_annot_df[order(col_annot_df$CellType), , drop = FALSE]
# Select significant DEGs
deg_sig <- deg_tbl[abs(deg_tbl$logFC) > log2(FC_threshold) &
deg_tbl$adj.P.Val < P_threshold]$V1
# Select significant DEGs
deg_tbl <- fread("DEG_P1_lfc0.tsv")
deg_sig <- deg_tbl[abs(deg_tbl$logFC) > log2(FC_threshold) &
deg_tbl$adj.P.Val < P_threshold]$V1
